
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000616  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000616  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000616  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000648  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ebe  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000869  00000000  00000000  00001632  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007fb  00000000  00000000  00001e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00002698  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000460  00000000  00000000  000027f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000337  00000000  00000000  00002c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002f8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 23 01 	call	0x246	; 0x246 <main>
  74:	0c 94 cf 02 	jmp	0x59e	; 0x59e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <IR_Read>:
#include "irsensor.h"

int8_t IR_Read (uint8_t L /*left sensor*/ , uint8_t M /*mid sensor*/ , uint8_t R /*right sensor*/)
{
	
	if ((!(MyPort&(1<<L))&& !(MyPort&(1<<M)) && MyPort&(1<<R)) || (!(MyPort&(1<<L))&& MyPort&(1<<M) && MyPort&(1<<R)))
  7c:	2b b3       	in	r18, 0x1b	; 27
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	08 2e       	mov	r0, r24
  82:	02 c0       	rjmp	.+4      	; 0x88 <IR_Read+0xc>
  84:	35 95       	asr	r19
  86:	27 95       	ror	r18
  88:	0a 94       	dec	r0
  8a:	e2 f7       	brpl	.-8      	; 0x84 <IR_Read+0x8>
  8c:	20 fd       	sbrc	r18, 0
  8e:	14 c0       	rjmp	.+40     	; 0xb8 <IR_Read+0x3c>
  90:	2b b3       	in	r18, 0x1b	; 27
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	06 2e       	mov	r0, r22
  96:	02 c0       	rjmp	.+4      	; 0x9c <IR_Read+0x20>
  98:	35 95       	asr	r19
  9a:	27 95       	ror	r18
  9c:	0a 94       	dec	r0
  9e:	e2 f7       	brpl	.-8      	; 0x98 <IR_Read+0x1c>
  a0:	20 fd       	sbrc	r18, 0
  a2:	0a c0       	rjmp	.+20     	; 0xb8 <IR_Read+0x3c>
  a4:	2b b3       	in	r18, 0x1b	; 27
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	04 2e       	mov	r0, r20
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <IR_Read+0x34>
  ac:	35 95       	asr	r19
  ae:	27 95       	ror	r18
  b0:	0a 94       	dec	r0
  b2:	e2 f7       	brpl	.-8      	; 0xac <IR_Read+0x30>
  b4:	20 fd       	sbrc	r18, 0
  b6:	5a c0       	rjmp	.+180    	; 0x16c <IR_Read+0xf0>
  b8:	2b b3       	in	r18, 0x1b	; 27
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	08 2e       	mov	r0, r24
  be:	02 c0       	rjmp	.+4      	; 0xc4 <IR_Read+0x48>
  c0:	35 95       	asr	r19
  c2:	27 95       	ror	r18
  c4:	0a 94       	dec	r0
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <IR_Read+0x44>
  c8:	20 fd       	sbrc	r18, 0
  ca:	14 c0       	rjmp	.+40     	; 0xf4 <IR_Read+0x78>
  cc:	2b b3       	in	r18, 0x1b	; 27
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	06 2e       	mov	r0, r22
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <IR_Read+0x5c>
  d4:	35 95       	asr	r19
  d6:	27 95       	ror	r18
  d8:	0a 94       	dec	r0
  da:	e2 f7       	brpl	.-8      	; 0xd4 <IR_Read+0x58>
  dc:	20 ff       	sbrs	r18, 0
  de:	0a c0       	rjmp	.+20     	; 0xf4 <IR_Read+0x78>
  e0:	2b b3       	in	r18, 0x1b	; 27
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	04 2e       	mov	r0, r20
  e6:	02 c0       	rjmp	.+4      	; 0xec <IR_Read+0x70>
  e8:	35 95       	asr	r19
  ea:	27 95       	ror	r18
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <IR_Read+0x6c>
  f0:	20 fd       	sbrc	r18, 0
  f2:	3e c0       	rjmp	.+124    	; 0x170 <IR_Read+0xf4>
	{
		return -1 ;
	}
	else if ((MyPort&(1<<L)&& !(MyPort&(1<<M)) && !(MyPort&(1<<R))) || (MyPort&(1<<L)&& MyPort&(1<<M) && !(MyPort&(1<<R))))
  f4:	2b b3       	in	r18, 0x1b	; 27
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	08 2e       	mov	r0, r24
  fa:	02 c0       	rjmp	.+4      	; 0x100 <IR_Read+0x84>
  fc:	35 95       	asr	r19
  fe:	27 95       	ror	r18
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <IR_Read+0x80>
 104:	20 ff       	sbrs	r18, 0
 106:	14 c0       	rjmp	.+40     	; 0x130 <IR_Read+0xb4>
 108:	2b b3       	in	r18, 0x1b	; 27
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	06 2e       	mov	r0, r22
 10e:	02 c0       	rjmp	.+4      	; 0x114 <IR_Read+0x98>
 110:	35 95       	asr	r19
 112:	27 95       	ror	r18
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <IR_Read+0x94>
 118:	20 fd       	sbrc	r18, 0
 11a:	0a c0       	rjmp	.+20     	; 0x130 <IR_Read+0xb4>
 11c:	2b b3       	in	r18, 0x1b	; 27
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	04 2e       	mov	r0, r20
 122:	02 c0       	rjmp	.+4      	; 0x128 <IR_Read+0xac>
 124:	35 95       	asr	r19
 126:	27 95       	ror	r18
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <IR_Read+0xa8>
 12c:	20 ff       	sbrs	r18, 0
 12e:	22 c0       	rjmp	.+68     	; 0x174 <IR_Read+0xf8>
 130:	2b b3       	in	r18, 0x1b	; 27
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	f9 01       	movw	r30, r18
 136:	02 c0       	rjmp	.+4      	; 0x13c <IR_Read+0xc0>
 138:	f5 95       	asr	r31
 13a:	e7 95       	ror	r30
 13c:	8a 95       	dec	r24
 13e:	e2 f7       	brpl	.-8      	; 0x138 <IR_Read+0xbc>
 140:	e0 ff       	sbrs	r30, 0
 142:	1a c0       	rjmp	.+52     	; 0x178 <IR_Read+0xfc>
 144:	8b b3       	in	r24, 0x1b	; 27
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <IR_Read+0xd2>
 14a:	95 95       	asr	r25
 14c:	87 95       	ror	r24
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <IR_Read+0xce>
 152:	80 ff       	sbrs	r24, 0
 154:	13 c0       	rjmp	.+38     	; 0x17c <IR_Read+0x100>
 156:	8b b3       	in	r24, 0x1b	; 27
int8_t IR_Read (uint8_t L /*left sensor*/ , uint8_t M /*mid sensor*/ , uint8_t R /*right sensor*/)
{
	
	if ((!(MyPort&(1<<L))&& !(MyPort&(1<<M)) && MyPort&(1<<R)) || (!(MyPort&(1<<L))&& MyPort&(1<<M) && MyPort&(1<<R)))
	{
		return -1 ;
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <IR_Read+0xe4>
 15c:	95 95       	asr	r25
 15e:	87 95       	ror	r24
 160:	4a 95       	dec	r20
 162:	e2 f7       	brpl	.-8      	; 0x15c <IR_Read+0xe0>
 164:	f1 e0       	ldi	r31, 0x01	; 1
 166:	8f 27       	eor	r24, r31
 168:	81 70       	andi	r24, 0x01	; 1
 16a:	08 95       	ret
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	08 95       	ret
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	08 95       	ret
	}
	else if ((MyPort&(1<<L)&& !(MyPort&(1<<M)) && !(MyPort&(1<<R))) || (MyPort&(1<<L)&& MyPort&(1<<M) && !(MyPort&(1<<R))))
	{
		return 1 ;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	08 95       	ret
	}
	else
	{
		return 0 ;
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	08 95       	ret
 17c:	80 e0       	ldi	r24, 0x00	; 0
	}
	 /* if left sensor reads 0 then function returns 1 and car turns right
		if right sensor reads 0 then function returns -1 and car turns left 
		if both of them reads 1 or 0 then function returns 0 and car goes straight */
 17e:	08 95       	ret

00000180 <Normal>:
}



void Normal(char motionState){
	if( motionState == 'F' ){
 180:	86 34       	cpi	r24, 0x46	; 70
 182:	19 f4       	brne	.+6      	; 0x18a <Normal+0xa>
		Motor_Forward();
 184:	0e 94 c3 01 	call	0x386	; 0x386 <Motor_Forward>
 188:	13 c0       	rjmp	.+38     	; 0x1b0 <Normal+0x30>
	}
	else if(motionState == 'B' ){
 18a:	82 34       	cpi	r24, 0x42	; 66
 18c:	19 f4       	brne	.+6      	; 0x194 <Normal+0x14>
		Motor_Backward();
 18e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Motor_Backward>
 192:	0e c0       	rjmp	.+28     	; 0x1b0 <Normal+0x30>
	}
	else if(motionState == 'R' ){
 194:	82 35       	cpi	r24, 0x52	; 82
 196:	19 f4       	brne	.+6      	; 0x19e <Normal+0x1e>
		Motor_Right();
 198:	0e 94 2d 02 	call	0x45a	; 0x45a <Motor_Right>
 19c:	09 c0       	rjmp	.+18     	; 0x1b0 <Normal+0x30>
	}
	else if(motionState == 'L' ){
 19e:	8c 34       	cpi	r24, 0x4C	; 76
 1a0:	19 f4       	brne	.+6      	; 0x1a8 <Normal+0x28>
		Motor_Left();
 1a2:	0e 94 64 02 	call	0x4c8	; 0x4c8 <Motor_Left>
 1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <Normal+0x30>
	}
	else if(motionState == 'S' ){
 1a8:	83 35       	cpi	r24, 0x53	; 83
 1aa:	11 f4       	brne	.+4      	; 0x1b0 <Normal+0x30>
		Motor_Stop();
 1ac:	0e 94 8a 01 	call	0x314	; 0x314 <Motor_Stop>
	}


	if( !(PINA&(1<<PC4)) ){
 1b0:	cc 99       	sbic	0x19, 4	; 25
 1b2:	0b c0       	rjmp	.+22     	; 0x1ca <Normal+0x4a>
		
		Motor_Left();
 1b4:	0e 94 64 02 	call	0x4c8	; 0x4c8 <Motor_Left>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	2f ef       	ldi	r18, 0xFF	; 255
 1ba:	84 e3       	ldi	r24, 0x34	; 52
 1bc:	9c e0       	ldi	r25, 0x0C	; 12
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	90 40       	sbci	r25, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <Normal+0x3e>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <Normal+0x48>
 1c8:	00 00       	nop
		_delay_ms(250);
		
	}
	
	if( !(PINA&(1<<PC6)) ){
 1ca:	ce 99       	sbic	0x19, 6	; 25
 1cc:	0b c0       	rjmp	.+22     	; 0x1e4 <Normal+0x64>
		
		Motor_Right();
 1ce:	0e 94 2d 02 	call	0x45a	; 0x45a <Motor_Right>
 1d2:	2f ef       	ldi	r18, 0xFF	; 255
 1d4:	84 e3       	ldi	r24, 0x34	; 52
 1d6:	9c e0       	ldi	r25, 0x0C	; 12
 1d8:	21 50       	subi	r18, 0x01	; 1
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <Normal+0x58>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <Normal+0x62>
 1e2:	00 00       	nop
 1e4:	08 95       	ret

000001e6 <Line>:
// 	}
*/
}

void Line(){
	if(IR_Read(PC4,PC5,PC6) == 0){
 1e6:	46 e0       	ldi	r20, 0x06	; 6
 1e8:	65 e0       	ldi	r22, 0x05	; 5
 1ea:	84 e0       	ldi	r24, 0x04	; 4
 1ec:	0e 94 3e 00 	call	0x7c	; 0x7c <IR_Read>
 1f0:	81 11       	cpse	r24, r1
 1f2:	09 c0       	rjmp	.+18     	; 0x206 <Line+0x20>
		Motor_setSpeed(200,200);
 1f4:	68 ec       	ldi	r22, 0xC8	; 200
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	88 ec       	ldi	r24, 0xC8	; 200
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 9b 02 	call	0x536	; 0x536 <Motor_setSpeed>
		Motor_Forward();
 200:	0e 94 c3 01 	call	0x386	; 0x386 <Motor_Forward>
 204:	08 95       	ret
	}
	else if(IR_Read(PC4,PC5,PC6) == -1){
 206:	46 e0       	ldi	r20, 0x06	; 6
 208:	65 e0       	ldi	r22, 0x05	; 5
 20a:	84 e0       	ldi	r24, 0x04	; 4
 20c:	0e 94 3e 00 	call	0x7c	; 0x7c <IR_Read>
 210:	8f 3f       	cpi	r24, 0xFF	; 255
 212:	49 f4       	brne	.+18     	; 0x226 <Line+0x40>
		Motor_setSpeed(100,100);
 214:	64 e6       	ldi	r22, 0x64	; 100
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	84 e6       	ldi	r24, 0x64	; 100
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 9b 02 	call	0x536	; 0x536 <Motor_setSpeed>
		Motor_Left();
 220:	0e 94 64 02 	call	0x4c8	; 0x4c8 <Motor_Left>
 224:	08 95       	ret
	}
	else if(IR_Read(PC4,PC5,PC6) == 1){
 226:	46 e0       	ldi	r20, 0x06	; 6
 228:	65 e0       	ldi	r22, 0x05	; 5
 22a:	84 e0       	ldi	r24, 0x04	; 4
 22c:	0e 94 3e 00 	call	0x7c	; 0x7c <IR_Read>
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	41 f4       	brne	.+16     	; 0x244 <Line+0x5e>
		Motor_setSpeed(100,100);
 234:	64 e6       	ldi	r22, 0x64	; 100
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	84 e6       	ldi	r24, 0x64	; 100
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 9b 02 	call	0x536	; 0x536 <Motor_setSpeed>
		Motor_Right();
 240:	0e 94 2d 02 	call	0x45a	; 0x45a <Motor_Right>
 244:	08 95       	ret

00000246 <main>:
void Line();


int main(void)
{
    UART_Init();
 246:	0e 94 c1 02 	call	0x582	; 0x582 <UART_Init>
	Motor_Init(PC0,PC1,PC2,PC3);
 24a:	23 e0       	ldi	r18, 0x03	; 3
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	42 e0       	ldi	r20, 0x02	; 2
 250:	50 e0       	ldi	r21, 0x00	; 0
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 56 01 	call	0x2ac	; 0x2ac <Motor_Init>
	Motor_setSpeed(250,250);
 25e:	6a ef       	ldi	r22, 0xFA	; 250
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	8a ef       	ldi	r24, 0xFA	; 250
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 9b 02 	call	0x536	; 0x536 <Motor_setSpeed>
	
	
	
	char motionState	= 'S';
	char carState		= 'W'; /* W -> Normal */ /* U -> Line */
 26a:	c7 e5       	ldi	r28, 0x57	; 87
	Motor_Init(PC0,PC1,PC2,PC3);
	Motor_setSpeed(250,250);
	
	
	
	char motionState	= 'S';
 26c:	d3 e5       	ldi	r29, 0x53	; 83
	char carState		= 'W'; /* W -> Normal */ /* U -> Line */
    while (1) 
    {

			
			if( UART_recieve() == 'W' || UART_recieve() == 'U')
 26e:	0e 94 cb 02 	call	0x596	; 0x596 <UART_recieve>
 272:	87 35       	cpi	r24, 0x57	; 87
 274:	21 f0       	breq	.+8      	; 0x27e <main+0x38>
 276:	0e 94 cb 02 	call	0x596	; 0x596 <UART_recieve>
 27a:	85 35       	cpi	r24, 0x55	; 85
 27c:	21 f4       	brne	.+8      	; 0x286 <main+0x40>
				{ carState = UART_recieve(); }
 27e:	0e 94 cb 02 	call	0x596	; 0x596 <UART_recieve>
 282:	c8 2f       	mov	r28, r24
 284:	03 c0       	rjmp	.+6      	; 0x28c <main+0x46>
			else { motionState = UART_recieve(); }
 286:	0e 94 cb 02 	call	0x596	; 0x596 <UART_recieve>
 28a:	d8 2f       	mov	r29, r24
			
			
			
			if(carState == 'U'){
 28c:	c5 35       	cpi	r28, 0x55	; 85
 28e:	19 f4       	brne	.+6      	; 0x296 <main+0x50>
				Line();
 290:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <Line>
 294:	ec cf       	rjmp	.-40     	; 0x26e <main+0x28>
			}
			else if(carState == 'w' || carState == 'u') {
 296:	8c 2f       	mov	r24, r28
 298:	8d 7f       	andi	r24, 0xFD	; 253
 29a:	85 37       	cpi	r24, 0x75	; 117
 29c:	19 f4       	brne	.+6      	; 0x2a4 <main+0x5e>
				Motor_Stop();
 29e:	0e 94 8a 01 	call	0x314	; 0x314 <Motor_Stop>
			
			
			if(carState == 'U'){
				Line();
			}
			else if(carState == 'w' || carState == 'u') {
 2a2:	e5 cf       	rjmp	.-54     	; 0x26e <main+0x28>
				Motor_Stop();
			}
			else{
				Normal(motionState);
 2a4:	8d 2f       	mov	r24, r29
 2a6:	0e 94 c0 00 	call	0x180	; 0x180 <Normal>
 2aa:	e1 cf       	rjmp	.-62     	; 0x26e <main+0x28>

000002ac <Motor_Init>:
				, motorA2 
				, motorB1 
				, motorB2;

void Motor_Init(uint8_t MotorA1 , uint8_t MotorA2 , uint8_t MotorB1 , uint8_t MotorB2){
	motorA1 = MotorA1 ; motorA2 = MotorA2;
 2ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 2b0:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <motorA2>
	motorB1 = MotorB1 ; motorB2 = MotorB2;
 2b4:	40 93 63 00 	sts	0x0063, r20	; 0x800063 <motorB1>
 2b8:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <motorB2>
	

	DDR_MOTOR |= ( (1<<motorA1) | (1<<motorA2) | (1<<motorB1) | (1<<motorB2) );
 2bc:	30 91 60 00 	lds	r19, 0x0060	; 0x800060 <_edata>
 2c0:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <motorA2>
 2c4:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <motorB1>
 2c8:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <motorB2>
 2cc:	64 b3       	in	r22, 0x14	; 20
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	fc 01       	movw	r30, r24
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <Motor_Init+0x2e>
 2d6:	ee 0f       	add	r30, r30
 2d8:	ff 1f       	adc	r31, r31
 2da:	3a 95       	dec	r19
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <Motor_Init+0x2a>
 2de:	dc 01       	movw	r26, r24
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <Motor_Init+0x3a>
 2e2:	aa 0f       	add	r26, r26
 2e4:	bb 1f       	adc	r27, r27
 2e6:	2a 95       	dec	r18
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <Motor_Init+0x36>
 2ea:	9d 01       	movw	r18, r26
 2ec:	2e 2b       	or	r18, r30
 2ee:	3f 2b       	or	r19, r31
 2f0:	fc 01       	movw	r30, r24
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <Motor_Init+0x4c>
 2f4:	ee 0f       	add	r30, r30
 2f6:	ff 1f       	adc	r31, r31
 2f8:	4a 95       	dec	r20
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <Motor_Init+0x48>
 2fc:	2e 2b       	or	r18, r30
 2fe:	3f 2b       	or	r19, r31
 300:	02 c0       	rjmp	.+4      	; 0x306 <Motor_Init+0x5a>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	7a 95       	dec	r23
 308:	e2 f7       	brpl	.-8      	; 0x302 <Motor_Init+0x56>
 30a:	82 2b       	or	r24, r18
 30c:	93 2b       	or	r25, r19
 30e:	86 2b       	or	r24, r22
 310:	84 bb       	out	0x14, r24	; 20
 312:	08 95       	ret

00000314 <Motor_Stop>:
// 	PORTA &= ~((1<<Motor1) | (1<<Motor2));
*/
}

void Motor_Stop(){
	PORT_MOTOR &= ~(1<<motorA1);
 314:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
 318:	45 b3       	in	r20, 0x15	; 21
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	bc 01       	movw	r22, r24
 320:	02 c0       	rjmp	.+4      	; 0x326 <Motor_Stop+0x12>
 322:	66 0f       	add	r22, r22
 324:	77 1f       	adc	r23, r23
 326:	2a 95       	dec	r18
 328:	e2 f7       	brpl	.-8      	; 0x322 <Motor_Stop+0xe>
 32a:	9b 01       	movw	r18, r22
 32c:	20 95       	com	r18
 32e:	30 95       	com	r19
 330:	24 23       	and	r18, r20
 332:	25 bb       	out	0x15, r18	; 21
	PORT_MOTOR &= ~(1<<motorA2);
 334:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <motorA2>
 338:	45 b3       	in	r20, 0x15	; 21
 33a:	bc 01       	movw	r22, r24
 33c:	02 c0       	rjmp	.+4      	; 0x342 <Motor_Stop+0x2e>
 33e:	66 0f       	add	r22, r22
 340:	77 1f       	adc	r23, r23
 342:	2a 95       	dec	r18
 344:	e2 f7       	brpl	.-8      	; 0x33e <Motor_Stop+0x2a>
 346:	9b 01       	movw	r18, r22
 348:	20 95       	com	r18
 34a:	30 95       	com	r19
 34c:	24 23       	and	r18, r20
 34e:	25 bb       	out	0x15, r18	; 21
	
	PORT_MOTOR &= ~(1<<motorB2);
 350:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <motorB2>
 354:	45 b3       	in	r20, 0x15	; 21
 356:	bc 01       	movw	r22, r24
 358:	02 c0       	rjmp	.+4      	; 0x35e <Motor_Stop+0x4a>
 35a:	66 0f       	add	r22, r22
 35c:	77 1f       	adc	r23, r23
 35e:	2a 95       	dec	r18
 360:	e2 f7       	brpl	.-8      	; 0x35a <Motor_Stop+0x46>
 362:	9b 01       	movw	r18, r22
 364:	20 95       	com	r18
 366:	30 95       	com	r19
 368:	24 23       	and	r18, r20
 36a:	25 bb       	out	0x15, r18	; 21
	PORT_MOTOR &= ~(1<<motorB2);
 36c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <motorB2>
 370:	25 b3       	in	r18, 0x15	; 21
 372:	02 c0       	rjmp	.+4      	; 0x378 <Motor_Stop+0x64>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	3a 95       	dec	r19
 37a:	e2 f7       	brpl	.-8      	; 0x374 <Motor_Stop+0x60>
 37c:	80 95       	com	r24
 37e:	90 95       	com	r25
 380:	82 23       	and	r24, r18
 382:	85 bb       	out	0x15, r24	; 21
 384:	08 95       	ret

00000386 <Motor_Forward>:
}

void Motor_Forward(){
	PORT_MOTOR |= (1<<motorA1);
 386:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
 38a:	45 b3       	in	r20, 0x15	; 21
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	bc 01       	movw	r22, r24
 392:	02 c0       	rjmp	.+4      	; 0x398 <Motor_Forward+0x12>
 394:	66 0f       	add	r22, r22
 396:	77 1f       	adc	r23, r23
 398:	2a 95       	dec	r18
 39a:	e2 f7       	brpl	.-8      	; 0x394 <Motor_Forward+0xe>
 39c:	9b 01       	movw	r18, r22
 39e:	24 2b       	or	r18, r20
 3a0:	25 bb       	out	0x15, r18	; 21
	PORT_MOTOR &= ~(1<<motorA2);
 3a2:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <motorA2>
 3a6:	45 b3       	in	r20, 0x15	; 21
 3a8:	bc 01       	movw	r22, r24
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <Motor_Forward+0x2a>
 3ac:	66 0f       	add	r22, r22
 3ae:	77 1f       	adc	r23, r23
 3b0:	2a 95       	dec	r18
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <Motor_Forward+0x26>
 3b4:	9b 01       	movw	r18, r22
 3b6:	20 95       	com	r18
 3b8:	30 95       	com	r19
 3ba:	24 23       	and	r18, r20
 3bc:	25 bb       	out	0x15, r18	; 21
	
	PORT_MOTOR |= (1<<motorB1);
 3be:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <motorB1>
 3c2:	45 b3       	in	r20, 0x15	; 21
 3c4:	bc 01       	movw	r22, r24
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <Motor_Forward+0x46>
 3c8:	66 0f       	add	r22, r22
 3ca:	77 1f       	adc	r23, r23
 3cc:	2a 95       	dec	r18
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <Motor_Forward+0x42>
 3d0:	9b 01       	movw	r18, r22
 3d2:	24 2b       	or	r18, r20
 3d4:	25 bb       	out	0x15, r18	; 21
	PORT_MOTOR &= ~(1<<motorB2);
 3d6:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <motorB2>
 3da:	25 b3       	in	r18, 0x15	; 21
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <Motor_Forward+0x5c>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	3a 95       	dec	r19
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <Motor_Forward+0x58>
 3e6:	80 95       	com	r24
 3e8:	90 95       	com	r25
 3ea:	82 23       	and	r24, r18
 3ec:	85 bb       	out	0x15, r24	; 21
 3ee:	08 95       	ret

000003f0 <Motor_Backward>:
}

void Motor_Backward(){
	PORT_MOTOR |= (1<<motorA2);
 3f0:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <motorA2>
 3f4:	45 b3       	in	r20, 0x15	; 21
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	bc 01       	movw	r22, r24
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fe:	66 0f       	add	r22, r22
 400:	77 1f       	adc	r23, r23
 402:	2a 95       	dec	r18
 404:	e2 f7       	brpl	.-8      	; 0x3fe <Motor_Backward+0xe>
 406:	9b 01       	movw	r18, r22
 408:	24 2b       	or	r18, r20
 40a:	25 bb       	out	0x15, r18	; 21
	PORT_MOTOR &= ~(1<<motorA1);
 40c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
 410:	45 b3       	in	r20, 0x15	; 21
 412:	bc 01       	movw	r22, r24
 414:	02 c0       	rjmp	.+4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 416:	66 0f       	add	r22, r22
 418:	77 1f       	adc	r23, r23
 41a:	2a 95       	dec	r18
 41c:	e2 f7       	brpl	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 41e:	9b 01       	movw	r18, r22
 420:	20 95       	com	r18
 422:	30 95       	com	r19
 424:	24 23       	and	r18, r20
 426:	25 bb       	out	0x15, r18	; 21
	
	PORT_MOTOR |= (1<<motorB2);
 428:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <motorB2>
 42c:	45 b3       	in	r20, 0x15	; 21
 42e:	bc 01       	movw	r22, r24
 430:	02 c0       	rjmp	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 432:	66 0f       	add	r22, r22
 434:	77 1f       	adc	r23, r23
 436:	2a 95       	dec	r18
 438:	e2 f7       	brpl	.-8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 43a:	9b 01       	movw	r18, r22
 43c:	24 2b       	or	r18, r20
 43e:	25 bb       	out	0x15, r18	; 21
	PORT_MOTOR &= ~(1<<motorB1);
 440:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <motorB1>
 444:	25 b3       	in	r18, 0x15	; 21
 446:	02 c0       	rjmp	.+4      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	3a 95       	dec	r19
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 450:	80 95       	com	r24
 452:	90 95       	com	r25
 454:	82 23       	and	r24, r18
 456:	85 bb       	out	0x15, r24	; 21
 458:	08 95       	ret

0000045a <Motor_Right>:

}

void Motor_Right(){
	PORT_MOTOR |= (1<<motorA2);
 45a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <motorA2>
 45e:	45 b3       	in	r20, 0x15	; 21
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	bc 01       	movw	r22, r24
 466:	02 c0       	rjmp	.+4      	; 0x46c <Motor_Right+0x12>
 468:	66 0f       	add	r22, r22
 46a:	77 1f       	adc	r23, r23
 46c:	2a 95       	dec	r18
 46e:	e2 f7       	brpl	.-8      	; 0x468 <Motor_Right+0xe>
 470:	9b 01       	movw	r18, r22
 472:	24 2b       	or	r18, r20
 474:	25 bb       	out	0x15, r18	; 21
	PORT_MOTOR &= ~(1<<motorA1);
 476:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
 47a:	45 b3       	in	r20, 0x15	; 21
 47c:	bc 01       	movw	r22, r24
 47e:	02 c0       	rjmp	.+4      	; 0x484 <Motor_Right+0x2a>
 480:	66 0f       	add	r22, r22
 482:	77 1f       	adc	r23, r23
 484:	2a 95       	dec	r18
 486:	e2 f7       	brpl	.-8      	; 0x480 <Motor_Right+0x26>
 488:	9b 01       	movw	r18, r22
 48a:	20 95       	com	r18
 48c:	30 95       	com	r19
 48e:	24 23       	and	r18, r20
 490:	25 bb       	out	0x15, r18	; 21
	
	PORT_MOTOR &= ~(1<<motorB2);
 492:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <motorB2>
 496:	45 b3       	in	r20, 0x15	; 21
 498:	bc 01       	movw	r22, r24
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <Motor_Right+0x46>
 49c:	66 0f       	add	r22, r22
 49e:	77 1f       	adc	r23, r23
 4a0:	2a 95       	dec	r18
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <Motor_Right+0x42>
 4a4:	9b 01       	movw	r18, r22
 4a6:	20 95       	com	r18
 4a8:	30 95       	com	r19
 4aa:	24 23       	and	r18, r20
 4ac:	25 bb       	out	0x15, r18	; 21
	PORT_MOTOR &= ~(1<<motorB1);
 4ae:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <motorB1>
 4b2:	25 b3       	in	r18, 0x15	; 21
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <Motor_Right+0x60>
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	3a 95       	dec	r19
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <Motor_Right+0x5c>
 4be:	80 95       	com	r24
 4c0:	90 95       	com	r25
 4c2:	82 23       	and	r24, r18
 4c4:	85 bb       	out	0x15, r24	; 21
 4c6:	08 95       	ret

000004c8 <Motor_Left>:

}

void Motor_Left(){
	PORT_MOTOR &= ~(1<<motorA1);
 4c8:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
 4cc:	45 b3       	in	r20, 0x15	; 21
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	bc 01       	movw	r22, r24
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <Motor_Left+0x12>
 4d6:	66 0f       	add	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	2a 95       	dec	r18
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <Motor_Left+0xe>
 4de:	9b 01       	movw	r18, r22
 4e0:	20 95       	com	r18
 4e2:	30 95       	com	r19
 4e4:	24 23       	and	r18, r20
 4e6:	25 bb       	out	0x15, r18	; 21
	PORT_MOTOR &= ~(1<<motorA2);
 4e8:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <motorA2>
 4ec:	45 b3       	in	r20, 0x15	; 21
 4ee:	bc 01       	movw	r22, r24
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <Motor_Left+0x2e>
 4f2:	66 0f       	add	r22, r22
 4f4:	77 1f       	adc	r23, r23
 4f6:	2a 95       	dec	r18
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <Motor_Left+0x2a>
 4fa:	9b 01       	movw	r18, r22
 4fc:	20 95       	com	r18
 4fe:	30 95       	com	r19
 500:	24 23       	and	r18, r20
 502:	25 bb       	out	0x15, r18	; 21
	
	PORT_MOTOR |= (1<<motorB1);
 504:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <motorB1>
 508:	45 b3       	in	r20, 0x15	; 21
 50a:	bc 01       	movw	r22, r24
 50c:	02 c0       	rjmp	.+4      	; 0x512 <Motor_Left+0x4a>
 50e:	66 0f       	add	r22, r22
 510:	77 1f       	adc	r23, r23
 512:	2a 95       	dec	r18
 514:	e2 f7       	brpl	.-8      	; 0x50e <Motor_Left+0x46>
 516:	9b 01       	movw	r18, r22
 518:	24 2b       	or	r18, r20
 51a:	25 bb       	out	0x15, r18	; 21
	PORT_MOTOR &= ~(1<<motorB2);
 51c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <motorB2>
 520:	25 b3       	in	r18, 0x15	; 21
 522:	02 c0       	rjmp	.+4      	; 0x528 <Motor_Left+0x60>
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	3a 95       	dec	r19
 52a:	e2 f7       	brpl	.-8      	; 0x524 <Motor_Left+0x5c>
 52c:	80 95       	com	r24
 52e:	90 95       	com	r25
 530:	82 23       	and	r24, r18
 532:	85 bb       	out	0x15, r24	; 21
 534:	08 95       	ret

00000536 <Motor_setSpeed>:

}

void Motor_setSpeed(uint8_t Motor1 , uint8_t Motor2){
 536:	cf 93       	push	r28
 538:	c6 2f       	mov	r28, r22
	analogWrite( 1, Motor1);
 53a:	68 2f       	mov	r22, r24
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	0e 94 a7 02 	call	0x54e	; 0x54e <analogWrite>
	analogWrite( 2, Motor2);
 542:	6c 2f       	mov	r22, r28
 544:	82 e0       	ldi	r24, 0x02	; 2
 546:	0e 94 a7 02 	call	0x54e	; 0x54e <analogWrite>
}
 54a:	cf 91       	pop	r28
 54c:	08 95       	ret

0000054e <analogWrite>:
					- 8 bit Prescaler 
		- Reset Timer 1
		- set Duty Cycle value to OCR Reg.
	*/
	
	if (pin == 1) {
 54e:	81 30       	cpi	r24, 0x01	; 1
 550:	59 f4       	brne	.+22     	; 0x568 <analogWrite+0x1a>
		DDRD |= (1 << PIND5);
 552:	8d 9a       	sbi	0x11, 5	; 17
		TCCR1A |= (1 << COM1A1) | (1 << WGM10);
 554:	8f b5       	in	r24, 0x2f	; 47
 556:	81 68       	ori	r24, 0x81	; 129
 558:	8f bd       	out	0x2f, r24	; 47
		TCCR1B |= (1 << WGM12) | (1 << CS11);
 55a:	8e b5       	in	r24, 0x2e	; 46
 55c:	8a 60       	ori	r24, 0x0A	; 10
 55e:	8e bd       	out	0x2e, r24	; 46
		OCR1A = duty_cycle;
 560:	70 e0       	ldi	r23, 0x00	; 0
 562:	7b bd       	out	0x2b, r23	; 43
 564:	6a bd       	out	0x2a, r22	; 42
 566:	08 95       	ret
	}
	else if (pin == 2) {
 568:	82 30       	cpi	r24, 0x02	; 2
 56a:	51 f4       	brne	.+20     	; 0x580 <analogWrite+0x32>
		DDRD |= (1 << PIND4);
 56c:	8c 9a       	sbi	0x11, 4	; 17
		TCCR1A |= (1 << COM1B1) | (1 << WGM10);
 56e:	8f b5       	in	r24, 0x2f	; 47
 570:	81 62       	ori	r24, 0x21	; 33
 572:	8f bd       	out	0x2f, r24	; 47
		TCCR1B |= (1 << WGM12) | (1 << CS11);
 574:	8e b5       	in	r24, 0x2e	; 46
 576:	8a 60       	ori	r24, 0x0A	; 10
 578:	8e bd       	out	0x2e, r24	; 46
		OCR1B = duty_cycle;
 57a:	70 e0       	ldi	r23, 0x00	; 0
 57c:	79 bd       	out	0x29, r23	; 41
 57e:	68 bd       	out	0x28, r22	; 40
 580:	08 95       	ret

00000582 <UART_Init>:
	
}

void UART_Send(uint8_t data ){
	while(! ((UCSRA) & (1<<UDRE) ));
	UDR = data;
 582:	87 e6       	ldi	r24, 0x67	; 103
 584:	89 b9       	out	0x09, r24	; 9
 586:	10 bc       	out	0x20, r1	; 32
 588:	8a b1       	in	r24, 0x0a	; 10
 58a:	88 61       	ori	r24, 0x18	; 24
 58c:	8a b9       	out	0x0a, r24	; 10
 58e:	80 b5       	in	r24, 0x20	; 32
 590:	86 60       	ori	r24, 0x06	; 6
 592:	80 bd       	out	0x20, r24	; 32
 594:	08 95       	ret

00000596 <UART_recieve>:
}

char UART_recieve(void){
	while(!((UCSRA) & (1<<RXC)));
 596:	5f 9b       	sbis	0x0b, 7	; 11
 598:	fe cf       	rjmp	.-4      	; 0x596 <UART_recieve>
	return UDR;
 59a:	8c b1       	in	r24, 0x0c	; 12
}
 59c:	08 95       	ret

0000059e <_exit>:
 59e:	f8 94       	cli

000005a0 <__stop_program>:
 5a0:	ff cf       	rjmp	.-2      	; 0x5a0 <__stop_program>
