
001.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000039e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000412  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000412  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000412  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d32  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000833  00000000  00000000  000012ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007cb  00000000  00000000  00001aed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  000022b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cd  00000000  00000000  00002464  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000372  00000000  00000000  00002831  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00002ba3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 97 01 	jmp	0x32e	; 0x32e <__vector_13>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 2c 01 	call	0x258	; 0x258 <main>
  74:	0c 94 cd 01 	jmp	0x39a	; 0x39a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <IR_Read>:
#include "irsensor.h"

int8_t IR_Read (uint8_t L /*left sensor*/ , uint8_t M /*mid sensor*/ , uint8_t R /*right sensor*/)
{
	
	if ((!(MyPort&(1<<L))&& !(MyPort&(1<<M)) && MyPort&(1<<R)) || (!(MyPort&(1<<L))&& MyPort&(1<<M) && MyPort&(1<<R)))
  7c:	23 b3       	in	r18, 0x13	; 19
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	08 2e       	mov	r0, r24
  82:	02 c0       	rjmp	.+4      	; 0x88 <IR_Read+0xc>
  84:	35 95       	asr	r19
  86:	27 95       	ror	r18
  88:	0a 94       	dec	r0
  8a:	e2 f7       	brpl	.-8      	; 0x84 <IR_Read+0x8>
  8c:	20 fd       	sbrc	r18, 0
  8e:	14 c0       	rjmp	.+40     	; 0xb8 <IR_Read+0x3c>
  90:	23 b3       	in	r18, 0x13	; 19
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	06 2e       	mov	r0, r22
  96:	02 c0       	rjmp	.+4      	; 0x9c <IR_Read+0x20>
  98:	35 95       	asr	r19
  9a:	27 95       	ror	r18
  9c:	0a 94       	dec	r0
  9e:	e2 f7       	brpl	.-8      	; 0x98 <IR_Read+0x1c>
  a0:	20 fd       	sbrc	r18, 0
  a2:	0a c0       	rjmp	.+20     	; 0xb8 <IR_Read+0x3c>
  a4:	23 b3       	in	r18, 0x13	; 19
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	04 2e       	mov	r0, r20
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <IR_Read+0x34>
  ac:	35 95       	asr	r19
  ae:	27 95       	ror	r18
  b0:	0a 94       	dec	r0
  b2:	e2 f7       	brpl	.-8      	; 0xac <IR_Read+0x30>
  b4:	20 fd       	sbrc	r18, 0
  b6:	5a c0       	rjmp	.+180    	; 0x16c <IR_Read+0xf0>
  b8:	23 b3       	in	r18, 0x13	; 19
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	08 2e       	mov	r0, r24
  be:	02 c0       	rjmp	.+4      	; 0xc4 <IR_Read+0x48>
  c0:	35 95       	asr	r19
  c2:	27 95       	ror	r18
  c4:	0a 94       	dec	r0
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <IR_Read+0x44>
  c8:	20 fd       	sbrc	r18, 0
  ca:	14 c0       	rjmp	.+40     	; 0xf4 <IR_Read+0x78>
  cc:	23 b3       	in	r18, 0x13	; 19
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	06 2e       	mov	r0, r22
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <IR_Read+0x5c>
  d4:	35 95       	asr	r19
  d6:	27 95       	ror	r18
  d8:	0a 94       	dec	r0
  da:	e2 f7       	brpl	.-8      	; 0xd4 <IR_Read+0x58>
  dc:	20 ff       	sbrs	r18, 0
  de:	0a c0       	rjmp	.+20     	; 0xf4 <IR_Read+0x78>
  e0:	23 b3       	in	r18, 0x13	; 19
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	04 2e       	mov	r0, r20
  e6:	02 c0       	rjmp	.+4      	; 0xec <IR_Read+0x70>
  e8:	35 95       	asr	r19
  ea:	27 95       	ror	r18
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <IR_Read+0x6c>
  f0:	20 fd       	sbrc	r18, 0
  f2:	3e c0       	rjmp	.+124    	; 0x170 <IR_Read+0xf4>
	{
		return 2 ;
	}
	else if ((MyPort&(1<<L)&& !(MyPort&(1<<M)) && !(MyPort&(1<<R))) || (MyPort&(1<<L)&& MyPort&(1<<M) && !(MyPort&(1<<R))))
  f4:	23 b3       	in	r18, 0x13	; 19
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	08 2e       	mov	r0, r24
  fa:	02 c0       	rjmp	.+4      	; 0x100 <IR_Read+0x84>
  fc:	35 95       	asr	r19
  fe:	27 95       	ror	r18
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <IR_Read+0x80>
 104:	20 ff       	sbrs	r18, 0
 106:	14 c0       	rjmp	.+40     	; 0x130 <IR_Read+0xb4>
 108:	23 b3       	in	r18, 0x13	; 19
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	06 2e       	mov	r0, r22
 10e:	02 c0       	rjmp	.+4      	; 0x114 <IR_Read+0x98>
 110:	35 95       	asr	r19
 112:	27 95       	ror	r18
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <IR_Read+0x94>
 118:	20 fd       	sbrc	r18, 0
 11a:	0a c0       	rjmp	.+20     	; 0x130 <IR_Read+0xb4>
 11c:	23 b3       	in	r18, 0x13	; 19
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	04 2e       	mov	r0, r20
 122:	02 c0       	rjmp	.+4      	; 0x128 <IR_Read+0xac>
 124:	35 95       	asr	r19
 126:	27 95       	ror	r18
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <IR_Read+0xa8>
 12c:	20 ff       	sbrs	r18, 0
 12e:	22 c0       	rjmp	.+68     	; 0x174 <IR_Read+0xf8>
 130:	23 b3       	in	r18, 0x13	; 19
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	f9 01       	movw	r30, r18
 136:	02 c0       	rjmp	.+4      	; 0x13c <IR_Read+0xc0>
 138:	f5 95       	asr	r31
 13a:	e7 95       	ror	r30
 13c:	8a 95       	dec	r24
 13e:	e2 f7       	brpl	.-8      	; 0x138 <IR_Read+0xbc>
 140:	e0 ff       	sbrs	r30, 0
 142:	1a c0       	rjmp	.+52     	; 0x178 <IR_Read+0xfc>
 144:	83 b3       	in	r24, 0x13	; 19
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <IR_Read+0xd2>
 14a:	95 95       	asr	r25
 14c:	87 95       	ror	r24
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <IR_Read+0xce>
 152:	80 ff       	sbrs	r24, 0
 154:	13 c0       	rjmp	.+38     	; 0x17c <IR_Read+0x100>
 156:	83 b3       	in	r24, 0x13	; 19
int8_t IR_Read (uint8_t L /*left sensor*/ , uint8_t M /*mid sensor*/ , uint8_t R /*right sensor*/)
{
	
	if ((!(MyPort&(1<<L))&& !(MyPort&(1<<M)) && MyPort&(1<<R)) || (!(MyPort&(1<<L))&& MyPort&(1<<M) && MyPort&(1<<R)))
	{
		return 2 ;
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <IR_Read+0xe4>
 15c:	95 95       	asr	r25
 15e:	87 95       	ror	r24
 160:	4a 95       	dec	r20
 162:	e2 f7       	brpl	.-8      	; 0x15c <IR_Read+0xe0>
 164:	f1 e0       	ldi	r31, 0x01	; 1
 166:	8f 27       	eor	r24, r31
 168:	81 70       	andi	r24, 0x01	; 1
 16a:	08 95       	ret
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	08 95       	ret
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	08 95       	ret
	}
	else if ((MyPort&(1<<L)&& !(MyPort&(1<<M)) && !(MyPort&(1<<R))) || (MyPort&(1<<L)&& MyPort&(1<<M) && !(MyPort&(1<<R))))
	{
		return 1 ;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	08 95       	ret
	}
	else
	{
		return 0 ;
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	08 95       	ret
 17c:	80 e0       	ldi	r24, 0x00	; 0
	}
	 /* if left sensor reads 0 then function returns 1 and car turns right
		if right sensor reads 0 then function returns -1 and car turns left 
		if both of them reads 1 or 0 then function returns 0 and car goes straight */
 17e:	08 95       	ret

00000180 <Stop>:



/* MOTION STATES */
void Stop(){
	Motor_Stop(PORTC,PC0,PC1);
 180:	85 b3       	in	r24, 0x15	; 21
 182:	41 e0       	ldi	r20, 0x01	; 1
 184:	50 e0       	ldi	r21, 0x00	; 0
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 a8 01 	call	0x350	; 0x350 <Motor_Stop>
	Motor_Stop(PORTC,PC2,PC3);
 190:	85 b3       	in	r24, 0x15	; 21
 192:	43 e0       	ldi	r20, 0x03	; 3
 194:	50 e0       	ldi	r21, 0x00	; 0
 196:	62 e0       	ldi	r22, 0x02	; 2
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 a8 01 	call	0x350	; 0x350 <Motor_Stop>
 1a0:	08 95       	ret

000001a2 <Forward>:
}

void Forward(){
	Motor_Forward(PORTC,PC0,PC1);
 1a2:	85 b3       	in	r24, 0x15	; 21
 1a4:	41 e0       	ldi	r20, 0x01	; 1
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	0e 94 a6 01 	call	0x34c	; 0x34c <Motor_Forward>
	Motor_Forward(PORTC,PC2,PC3);
 1ac:	85 b3       	in	r24, 0x15	; 21
 1ae:	43 e0       	ldi	r20, 0x03	; 3
 1b0:	62 e0       	ldi	r22, 0x02	; 2
 1b2:	0e 94 a6 01 	call	0x34c	; 0x34c <Motor_Forward>
 1b6:	08 95       	ret

000001b8 <Backward>:
}

void Backward(){
	Motor_Backward(PORTC,PC0,PC1);
 1b8:	85 b3       	in	r24, 0x15	; 21
 1ba:	41 e0       	ldi	r20, 0x01	; 1
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	0e 94 a7 01 	call	0x34e	; 0x34e <Motor_Backward>
	Motor_Backward(PORTC,PC2,PC3);
 1c2:	85 b3       	in	r24, 0x15	; 21
 1c4:	43 e0       	ldi	r20, 0x03	; 3
 1c6:	62 e0       	ldi	r22, 0x02	; 2
 1c8:	0e 94 a7 01 	call	0x34e	; 0x34e <Motor_Backward>
 1cc:	08 95       	ret

000001ce <Left>:
}

void Left(){
	Motor_Forward(PORTC,PC0,PC1);
 1ce:	85 b3       	in	r24, 0x15	; 21
 1d0:	41 e0       	ldi	r20, 0x01	; 1
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	0e 94 a6 01 	call	0x34c	; 0x34c <Motor_Forward>
	Motor_Backward(PORTC,PC2,PC3);
 1d8:	85 b3       	in	r24, 0x15	; 21
 1da:	43 e0       	ldi	r20, 0x03	; 3
 1dc:	62 e0       	ldi	r22, 0x02	; 2
 1de:	0e 94 a7 01 	call	0x34e	; 0x34e <Motor_Backward>
 1e2:	08 95       	ret

000001e4 <Right>:
}

void Right(){
	Motor_Backward(PORTC,PC0,PC1);
 1e4:	85 b3       	in	r24, 0x15	; 21
 1e6:	41 e0       	ldi	r20, 0x01	; 1
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	0e 94 a7 01 	call	0x34e	; 0x34e <Motor_Backward>
	Motor_Forward(PORTC,PC2,PC3);
 1ee:	85 b3       	in	r24, 0x15	; 21
 1f0:	43 e0       	ldi	r20, 0x03	; 3
 1f2:	62 e0       	ldi	r22, 0x02	; 2
 1f4:	0e 94 a6 01 	call	0x34c	; 0x34c <Motor_Forward>
 1f8:	08 95       	ret

000001fa <setSpeed>:
}

void setSpeed(uint8_t A, uint8_t B){
 1fa:	cf 93       	push	r28
 1fc:	c6 2f       	mov	r28, r22
	analogWrite(1,A);
 1fe:	68 2f       	mov	r22, r24
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	0e 94 a9 01 	call	0x352	; 0x352 <analogWrite>
	analogWrite(2,B);
 206:	6c 2f       	mov	r22, r28
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	0e 94 a9 01 	call	0x352	; 0x352 <analogWrite>
}
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <Line>:


/* LINE FOLLOWER STATE */
void Line(){
	
	if(IR_Read(PC4,PC5,PC6) == 2){
 212:	46 e0       	ldi	r20, 0x06	; 6
 214:	65 e0       	ldi	r22, 0x05	; 5
 216:	84 e0       	ldi	r24, 0x04	; 4
 218:	0e 94 3e 00 	call	0x7c	; 0x7c <IR_Read>
 21c:	82 30       	cpi	r24, 0x02	; 2
 21e:	39 f4       	brne	.+14     	; 0x22e <Line+0x1c>
		setSpeed(150,150);
 220:	66 e9       	ldi	r22, 0x96	; 150
 222:	86 e9       	ldi	r24, 0x96	; 150
 224:	0e 94 fd 00 	call	0x1fa	; 0x1fa <setSpeed>
		Left();
 228:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Left>
 22c:	08 95       	ret
	}
	else if(IR_Read(PC4,PC5,PC6) == 1){
 22e:	46 e0       	ldi	r20, 0x06	; 6
 230:	65 e0       	ldi	r22, 0x05	; 5
 232:	84 e0       	ldi	r24, 0x04	; 4
 234:	0e 94 3e 00 	call	0x7c	; 0x7c <IR_Read>
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	39 f4       	brne	.+14     	; 0x24a <Line+0x38>
		setSpeed(150,150);
 23c:	66 e9       	ldi	r22, 0x96	; 150
 23e:	86 e9       	ldi	r24, 0x96	; 150
 240:	0e 94 fd 00 	call	0x1fa	; 0x1fa <setSpeed>
		Right();
 244:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Right>
 248:	08 95       	ret
	}
	else{
		setSpeed(200,200);
 24a:	68 ec       	ldi	r22, 0xC8	; 200
 24c:	88 ec       	ldi	r24, 0xC8	; 200
 24e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <setSpeed>
		Forward();
 252:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Forward>
 256:	08 95       	ret

00000258 <main>:


int main(void)
{
	/* **************** INITIALIZATIONS **************** */
	sei();
 258:	78 94       	sei
	
    UART_init();
 25a:	0e 94 c3 01 	call	0x386	; 0x386 <UART_init>

	/* SET MOTORS PINS TO BE OUTPUT */
	SetMotor(DDRC,PC0,PC1);		/* MOTOR A */ 
 25e:	84 b3       	in	r24, 0x14	; 20
 260:	83 60       	ori	r24, 0x03	; 3
 262:	84 bb       	out	0x14, r24	; 20
	SetMotor(DDRC,PC2,PC3);		/* MOTOR B */	
 264:	84 b3       	in	r24, 0x14	; 20
 266:	8c 60       	ori	r24, 0x0C	; 12
 268:	84 bb       	out	0x14, r24	; 20
	setSpeed(0,0);				/* initialize speed by 0 */
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <setSpeed>
	
	
	/* SET IR PINS TO BE INPUT */
	SET_IR_PINS(DDRC,PC4);		/* LEFT IR */
 272:	a4 98       	cbi	0x14, 4	; 20
	SET_IR_PINS(DDRC,PC5);		/* MID IR */
 274:	a5 98       	cbi	0x14, 5	; 20
	SET_IR_PINS(DDRC,PC6);		/* RIGHT IR */
 276:	a6 98       	cbi	0x14, 6	; 20
	
	
	/* **************** USED VARIABLES **************** */ 
	
	char carState	= 'W';		/* W -> NORMAL STATE ----- w -> LINE FOLLOWER STATE */
 278:	c7 e5       	ldi	r28, 0x57	; 87
			{
				carState = 'W';
			}
			else if(data == 'w')
			{
				carState = 'w' ;
 27a:	17 e7       	ldi	r17, 0x77	; 119
				{
					setSpeed(255,255);
				}
				else
				{
					uint8_t x = 28 * data;
 27c:	dc e1       	ldi	r29, 0x1C	; 28
	{

			
			/* **************** CAR STATE SELECT **************** */
			
			if( data == 'W')
 27e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 282:	87 35       	cpi	r24, 0x57	; 87
 284:	31 f0       	breq	.+12     	; 0x292 <main+0x3a>
			{
				carState = 'W';
			}
			else if(data == 'w')
 286:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 28a:	87 37       	cpi	r24, 0x77	; 119
 28c:	19 f4       	brne	.+6      	; 0x294 <main+0x3c>
			{
				carState = 'w' ;
 28e:	c1 2f       	mov	r28, r17
 290:	01 c0       	rjmp	.+2      	; 0x294 <main+0x3c>
			
			/* **************** CAR STATE SELECT **************** */
			
			if( data == 'W')
			{
				carState = 'W';
 292:	c7 e5       	ldi	r28, 0x57	; 87
	
			
			
			/* **************** CAR SPEED SELECT **************** */
			
			if( (data >= '0' && data <= '9') || data == 'q')
 294:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 298:	80 33       	cpi	r24, 0x30	; 48
 29a:	20 f0       	brcs	.+8      	; 0x2a4 <main+0x4c>
 29c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 2a0:	8a 33       	cpi	r24, 0x3A	; 58
 2a2:	20 f0       	brcs	.+8      	; 0x2ac <main+0x54>
 2a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 2a8:	81 37       	cpi	r24, 0x71	; 113
 2aa:	89 f4       	brne	.+34     	; 0x2ce <main+0x76>
			{
				if(data == 'q')
 2ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 2b0:	81 37       	cpi	r24, 0x71	; 113
 2b2:	29 f4       	brne	.+10     	; 0x2be <main+0x66>
				{
					setSpeed(255,255);
 2b4:	6f ef       	ldi	r22, 0xFF	; 255
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <setSpeed>
 2bc:	08 c0       	rjmp	.+16     	; 0x2ce <main+0x76>
				}
				else
				{
					uint8_t x = 28 * data;
 2be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 2c2:	8d 9f       	mul	r24, r29
 2c4:	80 2d       	mov	r24, r0
 2c6:	11 24       	eor	r1, r1
					setSpeed(x,x);
 2c8:	68 2f       	mov	r22, r24
 2ca:	0e 94 fd 00 	call	0x1fa	; 0x1fa <setSpeed>
				
			
			
			/* **************** MOTION BASED ON CAR STATE **************** */
			
			if(carState == 'w')
 2ce:	c7 37       	cpi	r28, 0x77	; 119
 2d0:	19 f4       	brne	.+6      	; 0x2d8 <main+0x80>
			{
				Line();
 2d2:	0e 94 09 01 	call	0x212	; 0x212 <Line>
 2d6:	d3 cf       	rjmp	.-90     	; 0x27e <main+0x26>
			
			else
			{
				
				/* **************** AVOID OBSTACLES **************** */
				if( IS_BIT_CLEAR(PINC,PC4) || IS_BIT_CLEAR(PINC,PC5) )
 2d8:	9c 9b       	sbis	0x13, 4	; 19
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <main+0x88>
 2dc:	9d 99       	sbic	0x13, 5	; 19
 2de:	03 c0       	rjmp	.+6      	; 0x2e6 <main+0x8e>
				{
					Backward();
 2e0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <Backward>
 2e4:	cc cf       	rjmp	.-104    	; 0x27e <main+0x26>
				/* **************** NORMAL MOTION **************** */
				else
				{
					
					
					if(data == 'F')
 2e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 2ea:	86 34       	cpi	r24, 0x46	; 70
 2ec:	19 f4       	brne	.+6      	; 0x2f4 <main+0x9c>
					{
						Forward();
 2ee:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Forward>
 2f2:	c5 cf       	rjmp	.-118    	; 0x27e <main+0x26>
					}
					else if(data == 'B')
 2f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 2f8:	82 34       	cpi	r24, 0x42	; 66
 2fa:	19 f4       	brne	.+6      	; 0x302 <main+0xaa>
					{
						Backward();
 2fc:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <Backward>
 300:	be cf       	rjmp	.-132    	; 0x27e <main+0x26>
					}
					else if(data == 'R')
 302:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 306:	82 35       	cpi	r24, 0x52	; 82
 308:	19 f4       	brne	.+6      	; 0x310 <main+0xb8>
					{
						Right();
 30a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Right>
 30e:	b7 cf       	rjmp	.-146    	; 0x27e <main+0x26>
					}
					else if(data == 'L')
 310:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 314:	8c 34       	cpi	r24, 0x4C	; 76
 316:	19 f4       	brne	.+6      	; 0x31e <main+0xc6>
					{
						Left();
 318:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Left>
 31c:	b0 cf       	rjmp	.-160    	; 0x27e <main+0x26>
					}
					else if(data == 'S')
 31e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 322:	83 35       	cpi	r24, 0x53	; 83
 324:	09 f0       	breq	.+2      	; 0x328 <main+0xd0>
 326:	ab cf       	rjmp	.-170    	; 0x27e <main+0x26>
					{
						Stop();
 328:	0e 94 c0 00 	call	0x180	; 0x180 <Stop>
 32c:	a8 cf       	rjmp	.-176    	; 0x27e <main+0x26>

0000032e <__vector_13>:

/* **************** INTERRUPTS **************** */

/* UART */
ISR(USART_RXC_vect)
{
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	0f 92       	push	r0
 336:	11 24       	eor	r1, r1
 338:	8f 93       	push	r24
	data = UDR;
 33a:	8c b1       	in	r24, 0x0c	; 12
 33c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 340:	8f 91       	pop	r24
 342:	0f 90       	pop	r0
 344:	0f be       	out	0x3f, r0	; 63
 346:	0f 90       	pop	r0
 348:	1f 90       	pop	r1
 34a:	18 95       	reti

0000034c <Motor_Forward>:
 */ 

#include "Motor.h"


void Motor_Forward(uint8_t PIN_PORT , uint8_t PIN_IN1 , uint8_t PIN_IN2){
 34c:	08 95       	ret

0000034e <Motor_Backward>:
	SETBIT(PIN_PORT,PIN_IN1);
	RESETBIT(PIN_PORT,PIN_IN2);
}

void Motor_Backward(uint8_t PIN_PORT , uint8_t PIN_IN1 , uint8_t PIN_IN2){
 34e:	08 95       	ret

00000350 <Motor_Stop>:
	SETBIT(PIN_PORT,PIN_IN2);
	RESETBIT(PIN_PORT,PIN_IN1);
}

void Motor_Stop(uint8_t PIN_PORT , uint8_t PIN_IN1 , uint8_t PIN_IN2){
 350:	08 95       	ret

00000352 <analogWrite>:
					- 8 bit Prescaler 
		- Reset Timer 1
		- set Duty Cycle value to OCR Reg.
	*/
	
	if (pin == 1) {
 352:	81 30       	cpi	r24, 0x01	; 1
 354:	59 f4       	brne	.+22     	; 0x36c <analogWrite+0x1a>
		DDRD |= (1 << PIND5);
 356:	8d 9a       	sbi	0x11, 5	; 17
		TCCR1A |= (1 << COM1A1) | (1 << WGM10);
 358:	8f b5       	in	r24, 0x2f	; 47
 35a:	81 68       	ori	r24, 0x81	; 129
 35c:	8f bd       	out	0x2f, r24	; 47
		TCCR1B |= (1 << WGM12) | (1 << CS11);
 35e:	8e b5       	in	r24, 0x2e	; 46
 360:	8a 60       	ori	r24, 0x0A	; 10
 362:	8e bd       	out	0x2e, r24	; 46
		OCR1A = duty_cycle;
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	7b bd       	out	0x2b, r23	; 43
 368:	6a bd       	out	0x2a, r22	; 42
 36a:	08 95       	ret
	}
	else if (pin == 2) {
 36c:	82 30       	cpi	r24, 0x02	; 2
 36e:	51 f4       	brne	.+20     	; 0x384 <analogWrite+0x32>
		DDRD |= (1 << PIND4);
 370:	8c 9a       	sbi	0x11, 4	; 17
		TCCR1A |= (1 << COM1B1) | (1 << WGM10);
 372:	8f b5       	in	r24, 0x2f	; 47
 374:	81 62       	ori	r24, 0x21	; 33
 376:	8f bd       	out	0x2f, r24	; 47
		TCCR1B |= (1 << WGM12) | (1 << CS11);
 378:	8e b5       	in	r24, 0x2e	; 46
 37a:	8a 60       	ori	r24, 0x0A	; 10
 37c:	8e bd       	out	0x2e, r24	; 46
		OCR1B = duty_cycle;
 37e:	70 e0       	ldi	r23, 0x00	; 0
 380:	79 bd       	out	0x29, r23	; 41
 382:	68 bd       	out	0x28, r22	; 40
 384:	08 95       	ret

00000386 <UART_init>:


void UART_init(void)
{
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
 386:	82 e0       	ldi	r24, 0x02	; 2
 388:	8b b9       	out	0x0b, r24	; 11
 
	UCSRB = (1<<RXEN) | (1<<TXEN) | (1 << RXCIE); // Enable Transmission, Receive and Receive Interrupt
 38a:	88 e9       	ldi	r24, 0x98	; 152
 38c:	8a b9       	out	0x0a, r24	; 10
		
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
 38e:	86 e8       	ldi	r24, 0x86	; 134
 390:	80 bd       	out	0x20, r24	; 32
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
 392:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE;
 394:	8f ec       	ldi	r24, 0xCF	; 207
 396:	89 b9       	out	0x09, r24	; 9
 398:	08 95       	ret

0000039a <_exit>:
 39a:	f8 94       	cli

0000039c <__stop_program>:
 39c:	ff cf       	rjmp	.-2      	; 0x39c <__stop_program>
