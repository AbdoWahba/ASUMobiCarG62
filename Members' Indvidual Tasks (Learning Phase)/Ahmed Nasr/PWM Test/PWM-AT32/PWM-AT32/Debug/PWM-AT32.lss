
PWM-AT32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000017a  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000100  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001a4  00000000  00000000  00000432  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000162  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003a  00000000  00000000  00000782  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
{
    /* Replace with your application code */
    while (1) 
    {
	
	analogWrite(1, 127);
  6c:	6f e7       	ldi	r22, 0x7F	; 127
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	0e 94 3f 00 	call	0x7e	; 0x7e <analogWrite>
	analogWrite(2,127);
  74:	6f e7       	ldi	r22, 0x7F	; 127
  76:	82 e0       	ldi	r24, 0x02	; 2
  78:	0e 94 3f 00 	call	0x7e	; 0x7e <analogWrite>

	 
}
  7c:	f7 cf       	rjmp	.-18     	; 0x6c <main>

0000007e <analogWrite>:
					8 bit Prescaler 
		Reset Timer 1
		set Duty Cycle value to OCR Reg.
	*/
	//TCNT1 = 0;
	if (pin == 1) {
  7e:	81 30       	cpi	r24, 0x01	; 1
  80:	59 f4       	brne	.+22     	; 0x98 <analogWrite+0x1a>
		DDRD |= (1 << PIND5);
  82:	8d 9a       	sbi	0x11, 5	; 17
		TCCR1A |= (1 << COM1A1) | (1 << WGM10);
  84:	8f b5       	in	r24, 0x2f	; 47
  86:	81 68       	ori	r24, 0x81	; 129
  88:	8f bd       	out	0x2f, r24	; 47
		TCCR1B |= (1 << WGM12) | (1 << CS11);
  8a:	8e b5       	in	r24, 0x2e	; 46
  8c:	8a 60       	ori	r24, 0x0A	; 10
  8e:	8e bd       	out	0x2e, r24	; 46
		OCR1A = duty_cycle;
  90:	70 e0       	ldi	r23, 0x00	; 0
  92:	7b bd       	out	0x2b, r23	; 43
  94:	6a bd       	out	0x2a, r22	; 42
  96:	08 95       	ret
	}
	else if (pin == 2) {
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	51 f4       	brne	.+20     	; 0xb0 <analogWrite+0x32>
		DDRD |= (1 << PIND4);
  9c:	8c 9a       	sbi	0x11, 4	; 17
		TCCR1A |= (1 << COM1B1) | (1 << WGM10);
  9e:	8f b5       	in	r24, 0x2f	; 47
  a0:	81 62       	ori	r24, 0x21	; 33
  a2:	8f bd       	out	0x2f, r24	; 47
		TCCR1B |= (1 << WGM12) | (1 << CS11);
  a4:	8e b5       	in	r24, 0x2e	; 46
  a6:	8a 60       	ori	r24, 0x0A	; 10
  a8:	8e bd       	out	0x2e, r24	; 46
		OCR1B = duty_cycle;
  aa:	70 e0       	ldi	r23, 0x00	; 0
  ac:	79 bd       	out	0x29, r23	; 41
  ae:	68 bd       	out	0x28, r22	; 40
  b0:	08 95       	ret

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
