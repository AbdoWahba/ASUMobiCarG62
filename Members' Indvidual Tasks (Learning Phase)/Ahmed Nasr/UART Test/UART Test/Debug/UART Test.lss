
UART Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000031a  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000020d  00000000  00000000  00000516  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c2  00000000  00000000  00000723  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  000009e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000243  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019a  00000000  00000000  00000cef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00000e89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t data = 0;
  76:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t msg = 0;
  78:	1a 82       	std	Y+2, r1	; 0x02
	DDRA = 0xFF;
  7a:	8f ef       	ldi	r24, 0xFF	; 255
  7c:	8a bb       	out	0x1a, r24	; 26
	UART_init();
  7e:	0e 94 57 00 	call	0xae	; 0xae <UART_init>
	
    while (1) 
    {
	msg = UART_receiveByte();
  82:	0e 94 66 00 	call	0xcc	; 0xcc <UART_receiveByte>
  86:	8a 83       	std	Y+2, r24	; 0x02
	UART_sendByte(data);
  88:	89 81       	ldd	r24, Y+1	; 0x01
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 61 00 	call	0xc2	; 0xc2 <UART_sendByte>
	PORTA = msg;
  90:	8a 81       	ldd	r24, Y+2	; 0x02
  92:	8b bb       	out	0x1b, r24	; 27
	
	
	data++;
  94:	89 81       	ldd	r24, Y+1	; 0x01
  96:	8f 5f       	subi	r24, 0xFF	; 255
  98:	89 83       	std	Y+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	83 ed       	ldi	r24, 0xD3	; 211
  9e:	90 e3       	ldi	r25, 0x30	; 48
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x34>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x3e>
  aa:	00 00       	nop
  ac:	ea cf       	rjmp	.-44     	; 0x82 <main+0x16>

000000ae <UART_init>:
	 * Enable Transimiting and Receiving
	 * No Parity check - 8 bit data in the frame
	 * only one stop bit
	 * set BAUD Rate
	 */
	 UCSRA = (1 << U2X);
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	8b b9       	out	0x0b, r24	; 11
	 UCSRB = (1 << TXEN) | (1 << RXEN);
  b2:	88 e1       	ldi	r24, 0x18	; 24
  b4:	8a b9       	out	0x0a, r24	; 10
	 UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
  b6:	86 e8       	ldi	r24, 0x86	; 134
  b8:	80 bd       	out	0x20, r24	; 32
	 UBRRL = UBRR_VALUE;
  ba:	80 e1       	ldi	r24, 0x10	; 16
  bc:	89 b9       	out	0x09, r24	; 9
	 UBRRH = UBRR_VALUE>>8;
  be:	10 bc       	out	0x20, r1	; 32
  c0:	08 95       	ret

000000c2 <UART_sendByte>:
	 * send data
	 * waiting till TXC flag is set
	 * clear flag
	 */
	// while (!(UCSRA & (1 << UDRE)));
	 UDR = data;
  c2:	8c b9       	out	0x0c, r24	; 12
	 while (!(UCSRA & (1 << TXC))) {}
  c4:	5e 9b       	sbis	0x0b, 6	; 11
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <UART_sendByte+0x2>
	 UCSRA |= (1 << TXC);
  c8:	5e 9a       	sbi	0x0b, 6	; 11
  ca:	08 95       	ret

000000cc <UART_receiveByte>:
	 /* waiting till RXC flag is set
	 * clear the flag 
	 * return data
	 *
	 */
	 while  (!(UCSRA & (1 << RXC)));
  cc:	5f 9b       	sbis	0x0b, 7	; 11
  ce:	fe cf       	rjmp	.-4      	; 0xcc <UART_receiveByte>
	 UCSRA |= (1 << RXC);
  d0:	5f 9a       	sbi	0x0b, 7	; 11
	 return UDR;
  d2:	8c b1       	in	r24, 0x0c	; 12

 }
  d4:	08 95       	ret

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
